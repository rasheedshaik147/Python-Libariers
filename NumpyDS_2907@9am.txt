NumPy Searching Arrays:
You can search an array for a certain value, and return the indexes that get a match. To search an array, use the where() method.

Example:
import numpy as np
PyArr=np.array([10,1,2,3,4,100,20])
print(np.where(PyArr==10))

Example:
import numpy as np
Arr = np.array([1, 2, 3, 4, 5, 4, 4])
x = np.where(Arr == 4)
print(x) 

Example:
import numpy as np
Arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])
x = np.where(Arr%2 == 0)
print(x) 

NumPy arange() function  
It is one of the array creation routines that is usually based on numerical ranges. It basically creates an instance of ndarray with evenly spaced values and returns the reference to it.

Syntax:
numpy.arange(start, stop, step, dtype)  

Example:
import numpy as np
PyArr=np.arange(12)
print(PyArr)

Example:
import numpy as np
PyArr=np.arange(start=2, stop=12)
print(PyArr)

Example:
import numpy as np
PyArr=np.arange(start=2, stop=12, step=2)
print(PyArr)

Example 4: Providing Negative Arguments
import numpy as np
PyArr=np.arange(-10, -1)
print(PyArr)

Example:
import numpy as np
PyArr=np.arange(10,100,10)
print(PyArr)
print(np.where(PyArr==40))
print(np.where(PyArr==60))
print(np.where(PyArr%30==0))

Numpy searchsorted() Method
It present in the numpy library of python used to deal with sorted arrays. The function is used to determine the index of an element while inserting it into a sorted array.

Syntax:
numpy.searchsorted(a, v, side='left', sorter=None)

Parameters:
a: It is the input array of one dimension
v: It is the new value that has to be inserted into the array  a 
side: It is an optional parameter whose value by default is  left.
sorter: It is again an optional value that is set to  None  by default

Example:
import numpy as np
PyArr=np.array([1,10,11,15,21])
PyEle = np.searchsorted(PyArr, 17)
print(PyEle)

Example:
import numpy as np
PyArr=np.array([1,10,11,15,21])
PyEle = np.searchsorted(PyArr, 17)
print(PyEle)
print(np.insert(PyArr,4 ,17))

Example:
import numpy as np
PyArr = np.array([10,20,30,40,50,60,70,80,90])
print(np.searchsorted(PyArr,45))
print(np.searchsorted(PyArr,[15,25,35]))

Example:
import numpy as np
PyArr=np.array([1,10,11,15,21])
print(PyArr)
print(np.insert(PyArr,3,[-7, -1, 20,3,30]))

Example:
import numpy as np
PyArr=np.array([1,10,11,15,21])
PyEle=np.searchsorted(PyArr,[-7, -1, 20,3,30])
print(PyEle)
print(np.insert(PyArr,2 ,[-7, -1, 20,3,30]))

Example:Searching from right hand side:
import numpy as np
PyArr=np.searchsorted([1,2,3,3,5,6], 3)
print(PyArr)
PyArr=np.searchsorted([1,2,3,3,5,6], 3,side='right')
print(PyArr)

Example:Searchsorted for string values
import numpy as np
print(np.searchsorted(['apple','vinegar','zucchini'], 'bananas'))
print(np.searchsorted(['apple','vinegar','zucchini'], 'Bananas'))

Numpy searchsorted with 2D array
The numpy searchsorted function only accepts a one-dimensional array as an argument. If you will try to pass a multi-dimensional array, it will raise the error  object too deep for the desired array .

Example:
import numpy as np
PyArr = [[1,2,6],[3,4,10]]
print(np.searchsorted(PyArr[0], 2))
print(np.searchsorted(PyArr[1], 10))

Example:
import numpy as np
PyArr = np.array([[1,2,6],[3,4,10]])
NewArr = PyArr.flatten()
NewArr.sort()
print(NewArr)
print(np.searchsorted(NewArr, 9))

What is the difference between numpy.where() and numpy.searchsorted() function?
In the numpy.where() function, we mention a condition in the argument of the function. The values from the array which fulfill that condition will be printed. Whereas in numpy.searchsorted(), it returns the index of the specified element(s) to be inserted into the sorted array in order to maintain the sorting sequence.

axis attribute using sum method:
The columns are called as axis 0.
The rows are called as axis 1 

Example:
import numpy as np
a= np.array([(1,2,3),(3,4,5)])
print(a.sum(axis=0))
print(a.sum(axis=1))

NumPy Sorting Arrays
Sorting means putting elements in an ordered sequence. Ordered sequence is any sequence that has an order corresponding to elements, like numeric or alphabetical, ascending or descending.

Numpy sort() function
It will return the sorted copy of the input ndarray in Numpy.

Syntax:
numpy.sort(a, axis, kind=None, order=None)
a: array_like: It defines the source array, which is going to be sorted.
axis: int or None: It defines axis along which the sorting is performed. default -1
kind: quicksort, mergesort, heapsort}(optional)
order: str or list of str(optional) When an array is defined with fields.

Example:
import numpy as np
Arr = np.array([3, 2, 0, 1])
print(np.sort(Arr)) 

Example:
import numpy as np
Arr = np.array(['banana', 'cherry', 'apple'])
print(np.sort(Arr)) 

Example:
import numpy as np
Arr = np.array([True, False, True])
print(np.sort(Arr))

Sorting a 2-D Array
If you use the sort() method on a 2-D array, both arrays will be sorted:

Example:
import numpy as np
Arr = np.array([[3, 2, 4], [5, 0, 1]])
print(np.sort(Arr)) 

Python NumPy Advanced Sorting
Example:
import numpy as np 
PyArr1 = np.array([[17, 15], [10, 25]]) 
PyArr2 = np.sort(PyArr1)
print(PyArr2)
PyArr2 = np.sort(PyArr1, axis = -1)
print(PyArr2)

Example:
import numpy as np 
# sorting along the first axis
PyArr1 = np.array([[17, 15], [10, 25]]) 
print(PyArr1)
PyArr2 = np.sort(PyArr1, axis = 0)
print(PyArr2)
PyArr3 = np.sort(PyArr1, axis = 1)
print(PyArr3)

NOTE:0 means we have to check column wise,1 means we have to check rows wise.

Example:
import numpy as np 
PyArr1 = np.array([[199, 15], [20, 18]]) 
print(PyArr1)
PyArr2= np.sort(PyArr1, axis = None) 
print(PyArr2) 

Example:
import numpy as np
PyData = np.dtype([('name', 'S10'),('marks',int)])  
PyArr = np.array([('Mukesh',200),('John',251)],dtype = PyData)  
print(np.sort(PyArr,order = 'name'))
print(np.sort(PyArr,order = 'marks'))

NumPy transpose() Method  
The main task of this function is to change the column elements into the row elements and the column elements into the row elements.

NOTE:
This function has no effect on 1-D arrays and thus it is used for 2-D arrays.

Syntax:
numpy.transpose(a, axes=None)

Example:
import numpy as np 
PyArr = np.array([[6, 2, 4], [8, 5, 6], [7, 1, 9]]) 
print(PyArr) 
print()
PyArr1=np.transpose(PyArr)
print(PyArr1) 

Example:
import numpy as np 
PyArr= np.array([[6, 28], [8, 56], [7, 19]]) 
print(PyArr) 
PyArr1=np.transpose(PyArr,(0,1))
print(PyArr1) 
PyArr1=np.transpose(PyArr,(1,0))
print(PyArr1) 

Example 2: Iterate over Transpose of array
import numpy as np  
PyArr = np.array([[11,2,3,4],[29,4,15,6],[11,21,39,31]])  
print(PyArr)  
PyIter = PyArr.T #transpose
print(PyIter)  


NumPy Filter Array
Filtering Arrays
Getting some elements out of an existing array and creating a new array out of them is called filtering. In NumPy, you filter an array using a Boolean index list. A Boolean index list is a list of Booleans corresponding to indexes in the array.

Example:
import numpy as np
arr = np.array([41, 42, 43, 44])
x = [True, False, True, False]
newarr = arr[x]
print(newarr)

NOTE: 
The example above will return [41, 43], Because the new array contains only the values where the filter array had the value True, in this case, index 0 and 2.

Creating the Filter Array
In the example above we hard-coded the True and False values, but the common use is to create a filter array based on conditions.

Example:
import numpy as np
arr = np.array([41, 42, 43, 44])
# Create an empty list
filter_arr = []
# go through each element in arr
for element in arr:
  # if the element is higher than 42, set the value to True, otherwise False:
  if element > 42:
    filter_arr.append(True)
  else:
    filter_arr.append(False)
newarr = arr[filter_arr]
print(filter_arr)
print(newarr)

Creating Filter Directly From Array
The above example is quite a common task in NumPy and NumPy provides a nice way to tackle it. We can directly substitute the array instead of the iterable variable in our condition and it will work just as we expect it to.

Example:
import numpy as np
arr = np.array([41, 42, 43, 44])
filter_arr = arr > 42
newarr = arr[filter_arr]
print(filter_arr)
print(newarr)

Example:
import numpy as np
arr = np.array([1, 2, 3, 4, 5, 6, 7])
filter_arr = arr % 2 == 0
newarr = arr[filter_arr]
print(filter_arr)
print(newarr)

Python NumPy Indexing and Slicing
Array indexing is the same as accessing an array element. You can access an array element by referring to its index number. The indexes in NumPy arrays start with 0, meaning that the first element has index 0, and the second has index 1 etc.

Numpy Indexing:
Single Dimension Array:
x=[1, 2, 3, 4, 5, 6, 7, 8]

Indexing Left to Right ==> 
1, 2, 3, 4, 5, 6, 7, 8
0  1  2  3  4  5  6  7

Indexing Right to Left ==> 
1,    2,   3,   4,   5,   6,   7,   8
-8  -7  -6   -5   -4  -3   -2  -1

Example:
import numpy as np  
x=np.array([1,2,3,4,5,6,7])
print(x[3])
print(x[-1])
print(x[-4])

Example:
import numpy as np
PyArr = np.array([1, 2, 3, 4])
print(PyArr[0]) 
print(PyArr[1]) 
print(PyArr[3]) 

Example:
import numpy as np
PyArr = np.array([1, 2, 3, 4])
print(PyArr[1] +PyArr[3]) 
print(PyArr[2] +PyArr[3]) 
print(PyArr[2] -PyArr[3]) 

Access 2-D Arrays
To access elements from 2-D arrays we can use comma separated integers representing the dimension and the index of the element. Two Dimension Array:Array of One Dimensional Array, Collection of rows and columns.
	-2	-1(Index Right to Left)
	0	1 (Index Left to Right)
0  	-3		1	2
1  	-2		3	4
2 	 -1		5	6

Syntax:
if row is i, col is j==> a[i][j]

Example: Access Elements
print(a[0][1]) ==> 2
print(a[-3][-1]) ==> 2

Example:
import numpy as np
PyArr = np.array([[1,2,3,4,5], [6,7,8,9,10]])
print(PyArr[0, 1]) 
print(PyArr[0, 3]) 
print(PyArr[1, 3]) 
print(PyArr[1, 1]) 

Example:
import numpy as np  
PyArr=np.array([[1,2,3],[4,5,6]])
print(PyArr)
print(PyArr[0][0])
print(PyArr[0][1])
print(PyArr[-2][-1])

NOTE: Don't Use positive & Negative indexing mix in NUMPY Lib.

3. Three Dimensional Array: Array of two dimensional arrays.
To access elements from 3-D arrays we can use comma separated integers representing the dimensions and the index of the element.

First Two Dimesional Array
	-1	-2	-3	-4 (Indexing Right to Left)
	0 	1	2 	3 (Indexing Left to Right)
0  	-3	1	2	3	4
1  	-2	5	6	7	8
2  	-1	9	10	11	12

Second Two Dimesional Array
	-1	-2	-3	-4 (Indexing Right to Left)
	0 	1	2 	3 (Indexing Left to Right)
0 	-3	13	14	15	16
1 	-2	17	18	19	20
2 	-1	21	22	23	24

i means==> 2 (2 Dimensional Arrays-2 (0 & 1)
j means ==> Rows ==> 3
k means ==> Cols ==> 4

x[i][j][k] ==> a[2][3][4]

Example:
import numpy as np
PyArr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
print(PyArr[0, 1, 2]) 

Detailed Explanation:
The first number represents the first dimension, which contains two arrays:
[[1, 2, 3], [4, 5, 6]] and: [[7, 8, 9], [10, 11, 12]]
Since we selected 0, we are left with the first array:
[[1, 2, 3], [4, 5, 6]]

The second number represents the second dimension, which also contains two arrays:
[1, 2, 3] and: [4, 5, 6]
Since we selected 1, we are left with the second array: [4, 5, 6]
The third number represents the third dimension, which contains three values:
4 5 6 ==> Since we selected 2, we end up with the third value:6

Example:
import numpy as np
PyArr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
print(PyArr[0, 1, 1]) 
print(PyArr[0, 1, 2])
print(PyArr[1, 1, 2])

Example:
import numpy as np  
PyArr=np.array([[[1,2,3,4],[5,6,7,8],[9,10,11,12]],[[13,14,15,16],[17,18,19,20],[21,22,23,24]]])
print(PyArr)
print(PyArr[0][0][1])
print(PyArr[-2][-3][-3])
print(PyArr[1][0][3])

Negative Indexing
Use negative indexing to access an array from the end.

Example:
import numpy as np
PyArr = np.array([[1,2,3,4,5], [6,7,8,9,10]])
print(PyArr[1, -1]) 
print(PyArr[1, -2]) 
print(PyArr[0, -1]) 
print(PyArr[0, -4]) 

NumPy Array Slicing:
Slicing arrays
Slicing in python means taking elements from one given index to another given index.
We pass slice instead of index like this: [start:end].
We can also define the step, like this: [start:end:step].
If we don't pass start its considered 0 (Default)
If we don't pass end its considered length of array in that dimension(Default)
If we don't pass step its considered 1 (Default)

Example:1Dimension Array
import numpy as np
PyArr = np.array([1, 2, 3, 4, 5, 6, 7])
print(PyArr[1:5]) 
print(PyArr[4:]) 
print(PyArr[:4]) 

Negative Slicing
Use the minus operator to refer to an index from the end:

Example:
import numpy as np
PyArr = np.array([1, 2, 3, 4, 5, 6, 7])
print(PyArr[-3:-1]) 

STEP
Use the step value to determine the step of the slicing:

Example:
import numpy as np
PyArr = np.array([1, 2, 3, 4, 5, 6, 7])
print(PyArr[1:5:2]) 
print(PyArr[::2]) 
print(PyArr[::3]) 
print(PyArr[::-1]) 
print(PyArr[::]) #start=>0, stop=>LengthOfArray,Step=>Default One.
#It is treated as PyArr[0:7:1]

Slicing 2-Dimensions Arrays
Example:
import numpy as np
PyArr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
print(PyArr[1, 1:4]) 
print(PyArr[0, 1:4]) 
print(PyArr[1, 2:5]) 

NOTE:(,) indicates from all rows

Example:
import numpy as np
PyArr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
print(PyArr[0:2,2]) 
print(PyArr[1:2,2]) 
print(PyArr[0:1,1]) 

Example:
import numpy as np
PyArr = np.array([[1,2,3,4,5], [6,7,8,9,10]])
print(PyArr[0:2, 0:2]) 
print(PyArr[1:2, 1:3]) 
print(PyArr[0:1, 1:1]) 

Example:Interview Question
import numpy as np
PyArr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
print(PyArr[0:2, 1:4]) 

Slicing 3-Dimensions Arrays
Example:
import numpy as np  
PyArr=np.array([[[10,20,30],[40,50,60]],[[70,80,90],[100,110,120]]])
print(PyArr.ndim)
print(PyArr[0,1,0:2])
print(PyArr[1,1,0:2])
print(PyArr[1,0,0:3])
print(PyArr[0,0,0:2])

Example:
import numpy as np  
PyArr=np.array([[[1,2,3,4],[5,6,7,8],[9,10,11,12]],[[13,14,15,16],[17,18,19,20],[21,22,23,24]]])
print(PyArr.ndim)
print(PyArr[0,1,0:2])
print(PyArr[0,2,0:2])
print(PyArr[1,2,0:2])
print(PyArr[1,2,1:3])
