Matplotlib is easy to use and an amazing visualizing library in Python. It is built on NumPy arrays and designed to work with the broader SciPy stack and consists of several plots like line, bar, scatter, histogram, etc. It is better to represent the data through the graph where we can analyze the data more efficiently and make the specific decision according to data analysis.

What is Matplotlib? (Mathematics Chart Library)
1 It is a low level graph plotting library in python.
2 It was created by John D. Hunter.
3 It is open source and we can use it freely.
4 It is mostly written in python

Installation of Matplotlib
$pip install matplotlib

Import Matplotlib
Once Matplotlib is installed, import it in your applications by adding the import module statement:
import matplotlib

Checking Matplotlib Version
The version string is stored under __version__ attribute.

Example
import matplotlib
print(matplotlib.__version__)

Example:
import matplotlib as mat
print(mat.__version__)

Different modules in matplotlib:
1. PyPlot
2. PyLab

1. PyPlot:
Pyplot is a Matplotlib module that provides a MATLAB-like interface. Matplotlib is designed to be as usable as MATLAB, with the ability to use Python and the advantage of being free and open-source. Each pyplot function makes some changes to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc. The various plots we can utilize using Pyplot are Line Plot, Histogram, Scatter, 3D Plot, Image, Contour, and Polar

Pyplot in Matplotlib Syntax
Syntax: matplotlib.pyplot.plot(*args, scalex=True, scaley=True, data=None, **kwargs)

Parameters:
This function accepts parameters that enable us to set axes scales and format the graphs. These parameters are mentioned below:

plot(x, y): plot x and y using default line style and color.
plot.axis([xmin, xmax, ymin, ymax]): scales the x-axis and y-axis from minimum to maximum values
plot.(x, y, color=’green’, marker=’o’, linestyle=’dashed’, linewidth=2, markersize=12):
x and y co-ordinates are marked using circular markers of size 12 and green color line with — style of width 2
plot.xlabel(‘X-axis’): names x-axis
plot.ylabel(‘Y-axis’): names y-axis
plot(x, y, label = ‘Sample line ‘): plotted Sample Line will be displayed as a legend

BASIC TERMINOLOGY OF CHARTS
1.FIGURE
2.AXES
3.AXIS
4.LEGEND
5.MARKER

There are five key plots that are used for data visualization.
1. Bar Graph
2. Histogram
3. Scatter Plot
4. Area Plot
5. Pie Plot

Example:
from matplotlib import pyplot as plt
from matplotlin.pyplot as plt

Matplotlib Pyplot
Most of the Matplotlib utilities lies under the pyplot submodule, and are usually imported under the plt alias: import matplotlib.pyplot as plt

Example:
import matplotlib.pyplot as plt
import numpy as np
x = np.array([0, 6])
y = np.array([0, 250])
plt.plot(x, y)
plt.show()

Example
import matplotlib.pyplot as plt
import numpy as np
x = np.array([1, 8])
y = np.array([3, 10])
plt.plot(x, y)
plt.show()

NOTE:
The x-axis is the horizontal axis. The y-axis is the vertical axis.

Plotting Without Line
To plot only the markers, you can use shortcut string notation parameter 'o', which means 'rings'.

Example
import matplotlib.pyplot as plt
import numpy as np
x = np.array([1, 8])
y = np.array([3, 10])
plt.plot(x, y, 'o')
plt.show()

Multiple Points
You can plot as many points as you like, just make sure you have the same number of points in both axis.

Example:
import matplotlib.pyplot as plt
import numpy as np
x = np.array([1, 2, 6, 8])
y = np.array([3, 8, 1, 10])
plt.plot(x, y)
plt.show()

Default X-Points
If we do not specify the points in the x-axis, they will get the default values 0, 1, 2, 3, (etc. depending on the length of the y-points. So, if we take the same example as above, and leave out the x-points, the diagram will look like this:

Example:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([3, 8, 1, 10, 5, 7])
plt.plot(y)
plt.show()

NOTE:The x-points in the example above is [0, 1, 2, 3, 4, 5].

Matplotlib Markers
You can use the keyword argument marker to emphasize each point with a specified marker:

Example:Mark each point with a circle:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([3, 8, 1, 10])
plt.plot(y, marker = 'o')
plt.show()

Example:Mark each point with a star:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([3, 8, 1, 10])
plt.plot(y, marker = '*')
plt.show()

Marker 	Description
o' 	Circle 	
'*' 	Star 	
'.' 	Point 	
',' 	Pixel 	
'x' 	X 	
'X' 	X (filled) 	
'+' 	Plus 	
'P' 	Plus (filled) 	
's' 	Square 	
'D' 	Diamond 	
'd' 	Diamond (thin) 	
'p' 	Pentagon 	
'H' 	Hexagon 	
'h' 	Hexagon 	
'v' 	Triangle Down 	
'^' 	Triangle Up 	
'<' 	Triangle Left 	
'>' 	Triangle Right 	
'1' 	Tri Down 	
'2' 	Tri Up 	
'3' 	Tri Left 	
'4' 	Tri Right 	
'|' 	Vline 	
'_' 	Hline

Format Strings fmt
You can use also use the shortcut string notation parameter to specify the marker.

Syntax:
marker|line|color

Example:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([3, 8, 1, 10])
plt.plot(y, 'o:r')
plt.show()

Line Reference
Line Syntax 	Description
'-' 		Solid line 	
':' 		Dotted line 	
'--' 		Dashed line 	
'-.' 		Dashed/dotted line

Color Reference
Color  	Description
'r' 	Red 	
'g' 	Green 	
'b' 	Blue 	
'c' 	Cyan 	
'm' 	Magenta 	
'y' 	Yellow 	
'k' 	Black 	
'w' 	White

Marker Size
You can use the keyword argument markersize or the shorter version, ms to set the size of the markers:

Example:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([3, 8, 1, 10])
plt.plot(y, marker = 'o', ms = 20)
plt.show()

Marker Color
You can use the keyword argument markeredgecolor or the shorter mec to set the color of the edge of the markers:

Example:
import matplotlib.pyplot as plt
import numpy as np
y= np.array([3, 8, 1, 10])
plt.plot(y, marker = 'o', ms = 20, mec = 'r')
plt.show()

NOTE:
You can use the keyword argument markerfacecolor or the shorter mfc to set the color inside the edge of the markers:

Example:
import matplotlib.pyplot as plt
import numpy as np
y= np.array([3, 8, 1, 10])
plt.plot(y, marker = 'o', ms = 20, mfc = 'r')
plt.show()

NOTE:
Use both the mec and mfc arguments to color of the entire marker:

Example:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([3, 8, 1, 10])
plt.plot(y, marker = 'o', ms = 20, mec = 'r', mfc = 'r')
plt.show()

You can also use Hexadecimal color values:
Example
import matplotlib.pyplot as plt
import numpy as np
y = np.array([3, 8, 1, 10])
plt.plot(y, marker = 'o', ms = 20, mec = '#4CAF50', mfc = '#4CAF50')
plt.show()

Example: Each point with the color named "hotpink":
import matplotlib.pyplot as plt
import numpy as np
y = np.array([3, 8, 1, 10])
plt.plot(y, marker = 'o', ms = 20, mec = 'hotpink', mfc = 'hotpink')
plt.show()


Matplotlib Line:
Line graphs are commonly used to visualize trends over time or relationships between variables. We’ll learn how to create visually appealing line graphs to represent such data. You can use the keyword argument linestyle, or shorter ls, to change the style of the plotted line:

Example:
import matplotlib.pyplot as plt
import numpy as np
y  = np.array([3, 8, 1, 10])
plt.plot(y , linestyle = 'dotted')
plt.show()

Example:
import matplotlib.pyplot as plt
import numpy as np
y  = np.array([3, 8, 1, 10])
plt.plot(y , linestyle = 'dashed')
plt.show()

Line Styles
Style 		Notation
'solid' (default) 	'-' 	
'dotted' 		':' 	
'dashed' 		'--' 	
'dashdot' 		'-.' 	
'None' 		'' or ' '

Line Color
You can use the keyword argument color or the shorter c to set the color of the line:

Example:
import matplotlib.pyplot as plt
import numpy as np
y  = np.array([3, 8, 1, 10])
plt.plot(y , color = 'r')
plt.show()

Example:
import matplotlib.pyplot as plt
import numpy as np
y  = np.array([3, 8, 1, 10])
plt.plot(y , c = '#4CAF50')
plt.show()

Example:Plot with the color named "hotpink":
import matplotlib.pyplot as plt
import numpy as np
y  = np.array([3, 8, 1, 10])
plt.plot(y , c = 'hotpink')
plt.show()

Line Width
You can use the keyword argument linewidth or the shorter lw to change the width of the line.
The value is a floating number, in  :

Example:
import matplotlib.pyplot as plt
import numpy as np
y  = np.array([3, 8, 1, 10])
plt.plot(y , linewidth = '20.5')
plt.show()

Multiple Lines
You can plot as many lines as you like by simply adding more plt.plot() functions:
Example:
import matplotlib.pyplot as plt
import numpy as np
y1 = np.array([3, 8, 1, 10])
y2 = np.array([6, 2, 7, 11])
plt.plot(y1)
plt.plot(y2)
plt.show()

You can also plot many lines by adding the   for the x- and y-axis for each line in the same plt.plot() function.

(In the examples above we only specified the   on the y-axis, meaning that the   on the x-axis got the the default values (0, 1, 2, 3).)

Example
Draw two lines by specifiyng the x- and y-point values for both lines:
The x- and y- values come in pairs:

import matplotlib.pyplot as plt
import numpy as np
x1 = np.array([0, 1, 2, 3])
y1 = np.array([3, 8, 1, 10])
x2 = np.array([0, 1, 2, 3])
y2 = np.array([6, 2, 7, 11])
plt.plot(x1, y1, x2, y2)
plt.show()

Matplotlib Labels and Title
Create Labels for a Plot
With Pyplot, you can use the xlabel() and ylabel() functions to set a label for the x- and y-axis.

Example:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.plot(x, y)
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.show()

Create a Title for a Plot
With Pyplot, you can use the title() function to set a title for the plot.

Example
Add a plot title and labels for the x- and y-axis:

import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.plot(x, y)
plt.title("Sports Watch Data")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.show()

Set Font Properties for Title and Labels
You can use the fontdict parameter in xlabel(), ylabel(), and title() to set font properties for the title and labels.

Example
Set font properties for the title and labels:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
font1 = {'family':'serif','color':'blue','size':20}
font2 = {'family':'serif','color':'darkred','size':15}
plt.title("Sports Watch Data", fontdict = font1)
plt.xlabel("Average Pulse", fontdict = font2)
plt.ylabel("Calorie Burnage", fontdict = font2)
plt.plot(x, y)
plt.show()

Position the Title
You can use the loc parameter in title() to position the title.
Legal values are: 'left', 'right', and 'center'. Default value is 'center'.

Example:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.title("Sports Watch Data", loc = 'left')
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.plot(x, y)
plt.show()

Matplotlib Adding Grid Lines
Add Grid Lines to a Plot
With Pyplot, you can use the grid() function to add grid lines to the plot.

Example:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.title("Sports Watch Data")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.plot(x, y)
plt.grid()
plt.show() 

Specify Which Grid Lines to Display
You can use the axis parameter in the grid() function to specify which grid lines to display.
Legal values are: 'x', 'y', and 'both'. Default value is 'both'.

Example: Display only grid lines for the x-axis:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.title("Sports Watch Data")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.plot(x, y)
plt.grid(axis = 'x')
plt.show() 

Example: Display only grid lines for the y-axis:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.title("Sports Watch Data")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.plot(x, y)
plt.grid(axis = 'y')
plt.show() 

Set Line Properties for the Grid
You can also set the line properties of the grid, like this: 
grid(color = 'color', linestyle= 'linestyle', linewidth = number).

Example:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.title("Sports Watch Data")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.plot(x, y)
plt.grid(color = 'green', linestyle = '--', linewidth = 0.5)
plt.show()
